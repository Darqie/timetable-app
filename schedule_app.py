import streamlit as st
import streamlit.components.v1 as components
import uuid
from datetime import date, timedelta
from fpdf import FPDF
import os
import sqlite3

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Streamlit ---
st.set_page_config(page_title="–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä", layout="wide")

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
DB_NAME = "schedule.db"
MONDAY_INITIAL_DATE = date(2025, 6, 2) # –ü–æ–Ω–µ–¥—ñ–ª–æ–∫ –¥–ª—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –¥–∞—Ç–∏

PAIRS = [
    ("I", "8:30 ‚Äì 9:50"),
    ("II", "10:00 ‚Äì 11:20"),
    ("III", "11:35 ‚Äì 12:55"),
    ("IV", "13:15 ‚Äì 14:35"),
    ("V", "14:45 ‚Äì 16:05"),
]

DAYS = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è"]
NUM_GROUPS_PER_DAY = 6 

GROUP_NAMES = [f"–ì—Ä—É–ø–∞ {i+1}" for i in range(NUM_GROUPS_PER_DAY)]

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö SQLite ---

def get_db_connection():
    conn = sqlite3.connect(DB_NAME)
    conn.row_factory = sqlite3.Row # –î–æ–∑–≤–æ–ª—è—î –¥–æ—Å—Ç—É–ø –¥–æ –∫–æ–ª–æ–Ω–æ–∫ –∑–∞ —ñ–º–µ–Ω–µ–º
    return conn

def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS schedules (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            week_start_date TEXT NOT NULL,
            day_index INTEGER NOT NULL,
            group_index INTEGER NOT NULL,
            pair_index INTEGER NOT NULL,
            subject TEXT,
            teacher TEXT,
            item_id TEXT NOT NULL UNIQUE,
            UNIQUE(week_start_date, day_index, group_index, pair_index)
        )
    """)
    conn.commit()
    conn.close()

def save_schedule(week_start_date, schedule_data):
    conn = get_db_connection()
    cursor = conn.cursor()
    
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è —Ü—å–æ–≥–æ —Ç–∏–∂–Ω—è, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
    cursor.execute("DELETE FROM schedules WHERE week_start_date = ?", (week_start_date.isoformat(),))
    
    for (day_idx, group_idx, pair_idx), item in schedule_data.items():
        cursor.execute("""
            INSERT INTO schedules (week_start_date, day_index, group_index, pair_index, subject, teacher, item_id)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (week_start_date.isoformat(), day_idx, group_idx, pair_idx, item['subject'], item['teacher'], item['id']))
    
    conn.commit()
    conn.close()
    st.success(f"–†–æ–∑–∫–ª–∞–¥ –¥–ª—è —Ç–∏–∂–Ω—è {week_start_date.strftime('%d.%m.%Y')} –∑–±–µ—Ä–µ–∂–µ–Ω–æ!")

def load_schedule(week_start_date):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM schedules WHERE week_start_date = ?", (week_start_date.isoformat(),))
    rows = cursor.fetchall()
    conn.close()
    
    loaded_data = {}
    if rows:
        for row in rows:
            key = (row['day_index'], row['group_index'], row['pair_index'])
            loaded_data[key] = {
                "teacher": row['teacher'],
                "group": GROUP_NAMES[row['group_index']], 
                "subject": row['subject'],
                "id": row['item_id']
            }
        st.info(f"–†–æ–∑–∫–ª–∞–¥ –¥–ª—è —Ç–∏–∂–Ω—è {week_start_date.strftime('%d.%m.%Y')} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ.")
    else:
        st.warning(f"–†–æ–∑–∫–ª–∞–¥ –¥–ª—è —Ç–∏–∂–Ω—è {week_start_date.strftime('%d.%m.%Y')} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö. –°—Ç–≤–æ—Ä—é—î—Ç—å—Å—è —à–∞–±–ª–æ–Ω–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥.")
        # –Ø–∫—â–æ —Ä–æ–∑–∫–ª–∞–¥—É –Ω–µ–º–∞—î, –≥–µ–Ω–µ—Ä—É—î–º–æ —à–∞–±–ª–æ–Ω–Ω–∏–π
        for i_day in range(len(DAYS)):
            for i_group in range(NUM_GROUPS_PER_DAY): # –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
                for i_pair in range(len(PAIRS)):
                    key = (i_day, i_group, i_pair)
                    loaded_data[key] = {
                        "teacher": f"–í—á.{chr(65 + i_day)}.{i_group+1}.{i_pair+1}",
                        "group": GROUP_NAMES[i_group],
                        "subject": f"–ü—Ä–µ–¥–º.{i_pair+1}-{i_group+1}",
                        "id": str(uuid.uuid4())
                    }
    return loaded_data

def get_all_saved_weeks():
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT week_start_date FROM schedules ORDER BY week_start_date DESC")
    weeks = [date.fromisoformat(row['week_start_date']) for row in cursor.fetchall()]
    conn.close()
    return weeks

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —Ç–∞ —Å—Ç–∞–Ω—É —Å–µ—Å—ñ—ó ---
init_db()

if 'start_date' not in st.session_state:
    st.session_state.start_date = MONDAY_INITIAL_DATE # –ü–æ—á–∞—Ç–∫–æ–≤–∞ –¥–∞—Ç–∞

if 'schedule_display_data' not in st.session_state:
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä–∏ –ø–µ—Ä—à–æ–º—É –∑–∞–ø—É—Å–∫—É –∞–±–æ —è–∫—â–æ —Å—Ç–∞–Ω –ø—É—Å—Ç–∏–π
    st.session_state.schedule_display_data = load_schedule(st.session_state.start_date)

# --- –§—É–Ω–∫—Ü—ñ—ó –¥–ª—è –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Ç–∏–∂–Ω—è—Ö ---
def get_monday_of_week(target_date):
    days_since_monday = target_date.weekday()
    return target_date - timedelta(days=days_since_monday)

def set_week_and_rerun(new_start_date):
    st.session_state.start_date = new_start_date
    st.session_state.schedule_display_data = load_schedule(new_start_date) # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–æ–≤–∏–π —Ä–æ–∑–∫–ª–∞–¥ –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ç–∏–∂–Ω—è
    st.experimental_rerun()

# --- UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ Streamlit ---
st.markdown("<h2 style='text-align: center; margin-bottom: 10px;'>–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä</h2>", unsafe_allow_html=True)
st.markdown("---")

# ----- –ë–ª–æ–∫ –û–ø—Ü—ñ–π: –í–∏–±—ñ—Ä —Ç–∏–∂–Ω—è, –ó–±–µ—Ä–µ–≥—Ç–∏, –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ -----
col_label, col_date_input, col_spacer_date, col_load_select, col_save_btn, col_download_btn = st.columns([0.13, 0.15, 0.03, 0.15, 0.1, 0.14])

with col_label:
    st.markdown(
        """
        <style>
        .compact-label {
            display: flex;
            align-items: center;
            height: 100%;
            padding-top: 0px;
            padding-bottom: 0px;
            margin-top: 0px;
            margin-bottom: 0px;
            text-align: right;
            line-height: 1;
        }
        </style>
        <p class="compact-label">–ü–µ—Ä—à–∏–π –¥–µ–Ω—å —Ç–∏–∂–Ω—è:</p>
        """,
        unsafe_allow_html=True
    )

with col_date_input:
    selected_date_manual = st.date_input("", st.session_state.start_date, key="manual_date_picker")
    if selected_date_manual != st.session_state.start_date:
        set_week_and_rerun(selected_date_manual)

with col_spacer_date:
    st.write("")

with col_load_select:
    saved_weeks = get_all_saved_weeks()
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–∞—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ —Å–µ–ª–µ–∫—Ç–±–æ–∫—Å
    saved_weeks_formatted = {wk.strftime('%d.%m.%Y'): wk for wk in saved_weeks}
    
    # –î–æ–¥–∞—î–º–æ "–û–±—Ä–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥" —è–∫ –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç
    options = ["–û–±—Ä–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥"] + list(saved_weeks_formatted.keys())
    
    selected_saved_week_str = st.selectbox("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏:", options=options, key="load_week_selector")
    
    if selected_saved_week_str != "–û–±—Ä–∞—Ç–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π —Ä–æ–∑–∫–ª–∞–¥":
        selected_saved_week_date = saved_weeks_formatted[selected_saved_week_str]
        if selected_saved_week_date != st.session_state.start_date:
            set_week_and_rerun(selected_saved_week_date)

end_date = st.session_state.start_date + timedelta(days=4)

st.markdown(f"<h3 style='text-align: center; margin-top: 5px; margin-bottom: 5px;'>üìÜ {st.session_state.start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}</h3>", unsafe_allow_html=True)

# ----- –ë–ª–æ–∫ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó –ø–æ —Ç–∏–∂–Ω—è—Ö -----
spacer_left, col_prev_week, col_current_week, col_next_week, spacer_right = st.columns([1, 0.25, 0.25, 0.25, 1])

with col_prev_week:
    if st.button("‚è™ –ú–∏–Ω—É–ª–∏–π —Ç–∏–∂–¥–µ–Ω—å", key="prev_week_btn"):
        set_week_and_rerun(get_monday_of_week(st.session_state.start_date - timedelta(weeks=1)))

with col_current_week:
    if st.button("üóìÔ∏è –ü–æ—Ç–æ—á–Ω–∏–π —Ç–∏–∂–¥–µ–Ω—å", key="current_week_btn"):
        set_week_and_rerun(get_monday_of_week(date.today()))

with col_next_week:
    if st.button("‚è© –ú–∞–π–±—É—Ç–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å", key="next_week_btn"):
        set_week_and_rerun(get_monday_of_week(st.session_state.start_date + timedelta(weeks=1)))

st.markdown("---")

# --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ç–∞–±–ª–∏—Ü—ñ —Ä–æ–∑–∫–ª–∞–¥—É –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ---
# –¶–µ–π –±–ª–æ–∫ –±—É–≤ –æ–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ —Å—ñ—Ç–∫–∏
st.markdown(
    f"""
<style>
.schedule-grid-container {{
    display: grid;
    /* 120px –¥–ª—è –¥–Ω—è, 80px –¥–ª—è –≥—Ä—É–ø–∏, –ø–æ—Ç—ñ–º 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –ø–∞—Ä */
    grid-template-columns: 120px 80px repeat({len(PAIRS)}, 1fr);
    gap: 1px;
    font-family: 'Roboto', sans-serif;
    border: 1px solid #C0D0E0;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    margin-top: 20px;
    background-color: #F8F8F8;
    max-width: 100%;
    overflow-x: auto;
}}
.grid-cell {{
    border: 1px solid #C0D0E0;
    background: rgba(255, 255, 255, 0.7);
    padding: 4px;
    text-align: center;
    box-sizing: border-box;
    font-size: 10px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}}
.header-cell {{
    font-weight: bold;
    background: rgba(220, 230, 240, 0.8);
}}
.top-left-header {{
    background: rgba(220, 230, 240, 0.8);
    border-radius: 12px 0 0 0;
    /* grid-column —Ç–∞ grid-row –¥–ª—è —è–≤–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –≤ —Å—ñ—Ç—Ü—ñ */
    grid-column: 1 / 2; 
    grid-row: 1 / 2;
}}
.group-header-title {{
    background: rgba(220, 230, 240, 0.8);
    border-radius: 0;
    grid-column: 2 / 3;
    grid-row: 1 / 2;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
}}
.pair-header-cell {{
    background: rgba(180, 210, 230, 0.8);
    font-size: 16px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}}
.day-header-cell {{
    background: rgba(240, 200, 100, 0.9);
    font-size: 16px;
    writing-mode: vertical-rl; /* –û—Ä—ñ—î–Ω—Ç–∞—Ü—ñ—è —Ç–µ–∫—Å—Ç—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è */
    text-orientation: mixed;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    border-left: 1px solid #C0D0E0;
    grid-row: 2 / {2 + NUM_GROUPS_PER_DAY}; /* –†–æ–∑—Ç—è–≥—É—î–º–æ –Ω–∞ –≤—Å—ñ –≥—Ä—É–ø–∏ */
}}
.group-header-cell {{
    background: rgba(200, 220, 240, 0.8);
    font-size: 12px;
    display: flex;
    justify-content: center;
    align-items: center;
    font-weight: bold;
    border-top: 1px solid #C0D0E0;
}}
.stTextInput > div > div > input {{
    text-align: center !important;
    font-size: 9px !important;
    padding: 2px !important;
    margin: 0 !important;
    border: 1px solid #ddd !important;
    border-radius: 4px !important;
    width: 95% !important;
}}
.stTextInput > label {{
    display: none !important; /* Hide default Streamlit labels for compactness */
}}
</style>
<div class="schedule-grid-container">
    <div class="grid-cell top-left-header"></div>
    <div class="grid-cell group-header-title">–ì—Ä—É–ø–∞</div>
"""
, unsafe_allow_html=True
)

# Pair headers (—Ä–æ–∑–º—ñ—â—É—î–º–æ —ó—Ö —è–≤–Ω–æ –≤ –ø–µ—Ä—à–æ–º—É —Ä—è–¥—É)
for i, (roman, time_range) in enumerate(PAIRS):
    # grid-column –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 3, –±–æ –ø–µ—Ä—à—ñ –¥–≤—ñ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –¥–Ω—è —Ç–∞ –≥—Ä—É–ø–∏
    st.markdown(f'''
        <div class="grid-cell header-cell pair-header-cell" style="grid-column: {i + 3}; grid-row: 1;">
            <div><strong>{roman} –ü–ê–†–ê</strong></div>
            <div style="font-size: 13px; color: #333333; line-height: 1.2;">({time_range})</div>
        </div>
    ''', unsafe_allow_html=True)


# –û—Å–Ω–æ–≤–Ω—ñ —Ä—è–¥–∫–∏ –∑ –¥–∞–Ω–∏–º–∏
# –¢–µ–ø–µ—Ä –≥–µ–Ω–µ—Ä—É—î–º–æ –∫–æ–∂–µ–Ω "–ª–æ–≥—ñ—á–Ω–∏–π" —Ä—è–¥–æ–∫ (–¥–µ–Ω—å + –≥—Ä—É–ø–∞ + –ø–∞—Ä–∏) —è–∫ –æ–∫—Ä–µ–º–∏–π –Ω–∞–±—ñ—Ä Streamlit-–∫–æ–ª–æ–Ω–æ–∫
# –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è.
for i_day, day_name in enumerate(DAYS):
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è, —è–∫–∏–π —Ä–æ–∑—Ç—è–≥—É—î—Ç—å—Å—è –Ω–∞ –≤—Å—ñ –≥—Ä—É–ø–∏ —Ü—å–æ–≥–æ –¥–Ω—è
    st.markdown(f'<div class="grid-cell day-header-cell" style="grid-column: {i_day + 3}; grid-row: 2 / {2 + NUM_GROUPS_PER_DAY};">{day_name}</div>', unsafe_allow_html=True)
    # –ó–º—ñ–Ω–µ–Ω–æ: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –≤–∏–≤–æ–¥–∏—Ç—å—Å—è –æ–¥–∏–Ω —Ä–∞–∑ —ñ –∑–∞–π–º–∞—î –≤—Å—ñ –≥—Ä—É–ø–∏,
    # —Ç–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ä–µ—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–¥—É–º–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ü–∏–∫–ª—ñ–≤.
    # –§–∞–∫—Ç–∏—á–Ω–æ, –º–∏ —Å–ø–æ—á–∞—Ç–∫—É –≤–∏–≤–æ–¥–∏–º–æ –≤—Å—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏ (–≤–µ—Ä—Ö–Ω—ñ–π, –≥—Ä—É–ø–∏, –ø–∞—Ä–∏, –¥–Ω—ñ),
    # –∞ –ø–æ—Ç—ñ–º –≥–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–ª—è –≤–≤–æ–¥—É.

    # –¶–µ —Å–∫–ª–∞–¥–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞: –ø—Ä—è–º–æ —ñ–Ω—Ç–µ–≥—Ä—É–≤–∞—Ç–∏ st.text_input —É HTML-—Å—ñ—Ç–∫—É,
    # —â–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞ st.markdown, –Ω–µ–º–æ–∂–ª–∏–≤–æ.
    # Streamlit –æ–±—Ä–æ–±–ª—è—î –≤—ñ–¥–∂–µ—Ç–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ.
    # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è, –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä—è–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø.

    # –ú–∏ –ø–æ–≤–∏–Ω–Ω—ñ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º–∏–π "–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä" –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è,
    # —ñ –≤ –Ω—å–æ–º—É –±—É–¥—É—Ç—å —Ä—è–¥–∫–∏ –¥–ª—è –≥—Ä—É–ø.
    # –ê–ª–µ Streamlit elements always flow vertically.

    # –©–æ–± Streamlit –≤—ñ–¥–∂–µ—Ç–∏ (TextInput) –≤–∏–≥–ª—è–¥–∞–ª–∏ —è–∫ —á–∞—Å—Ç–∏–Ω–∞ —Å—ñ—Ç–∫–∏,
    # –º–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É, –∞ –ø–æ—Ç—ñ–º "–∑–∞–ø–æ–≤–Ω—é—î–º–æ" —ó—ó –≤—ñ–¥–∂–µ—Ç–∞–º–∏.
    # –û–¥–Ω–∞–∫ Streamlit –Ω–µ –¥–æ–∑–≤–æ–ª—è—î "–∑–∞–ø–æ–≤–Ω—é–≤–∞—Ç–∏" HTML-–¥—ñ–≤–∏ –≤—ñ–¥–∂–µ—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É.
    # –ù–∞–º –¥–æ–≤–µ–¥–µ—Ç—å—Å—è –≤—ñ–¥–º–æ–≤–∏—Ç–∏—Å—è –≤—ñ–¥ –Ω–∞—Å—Ç—ñ–ª—å–∫–∏ –∂–æ—Ä—Å—Ç–∫–æ–≥–æ grid layout –¥–ª—è TextInput
    # –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ components.html –∑ –¥–≤–æ—Å—Ç–æ—Ä–æ–Ω–Ω—ñ–º –∑–≤'—è–∑–∫–æ–º, —â–æ –∑–Ω–∞—á–Ω–æ —É—Å–∫–ª–∞–¥–Ω–∏—Ç—å –∫–æ–¥.

    # –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø—ñ–¥—Ö—ñ–¥, –¥–µ –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–ª–∏ st.columns(1)[0]
    # –±—É–≤ —Å–ø—Ä–æ–±–æ—é "–≤–±—É–¥—É–≤–∞—Ç–∏" –≤—ñ–¥–∂–µ—Ç–∏ –≤ —Å—ñ—Ç–∫—É, –∞–ª–µ –≤—ñ–Ω –ø–æ—Ä—É—à—É–≤–∞–≤ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π grid.
    #
    # –ù–∞ –∂–∞–ª—å, Streamlit –Ω–µ –Ω–∞–¥–∞—î –ø—Ä—è–º–æ–≥–æ —Å–ø–æ—Å–æ–±—É –¥–ª—è —Ü—å–æ–≥–æ.
    #
    # –î–∞–≤–∞–π—Ç–µ –ø–æ–≤–µ—Ä–Ω–µ–º–æ—Å—è –¥–æ –∫–æ–Ω—Ü–µ–ø—Ü—ñ—ó, –¥–µ –º–∏ –≥–µ–Ω–µ—Ä—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
    # –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Streamlit columns, –∞–ª–µ –±—É–¥–µ–º–æ –¥—É–∂–µ –æ–±–µ—Ä–µ–∂–Ω—ñ
    # –∑ —Ä–æ–∑–º—ñ—Ä–∞–º–∏ —ñ —Ç–∏–º, —è–∫ –≤–æ–Ω–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—é—Ç—å—Å—è.
    #
    # HTML-–∫–æ–¥ –≤–∏—â–µ –±—É–¥–µ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ª–∏—à–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏.
    # –¢–µ–ø–µ—Ä, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ editable cells, –º–∏ –ø–æ–≤–∏–Ω–Ω—ñ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ st.columns.
    # –¶–µ –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ —Ü–µ –±—É–¥–µ –Ω–µ "–æ–¥–Ω–∞" –≤–µ–ª–∏–∫–∞ —Å—ñ—Ç–∫–∞,
    # –∞ —Ä—è–¥ –∑–∞ —Ä—è–¥–æ–º, –¥–µ –∫–æ–∂–µ–Ω "—Ä—è–¥" (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≥—Ä—É–ø–∞ –Ω–∞ –¥–µ–Ω—å)
    # –±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é st.columns.

# –í—ñ–¥–º—ñ–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π HTML-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∏ –Ω–µ –º–æ–∂–µ–º–æ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –≤–±—É–¥—É–≤–∞—Ç–∏ –≤ –Ω—å–æ–≥–æ
# –≤—ñ–¥–∂–µ—Ç–∏ Streamlit —Ç–∞–∫–∏–º —á–∏–Ω–æ–º.
# –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ, –º–∏ –±—É–¥–µ–º–æ –±—É–¥—É–≤–∞—Ç–∏ —Ç–∞–±–ª–∏—Ü—é —Ä—è–¥ –∑–∞ —Ä—è–¥–æ–º, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ st.columns.

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω—ñ–≤ —Ç–∞ –≥—Ä—É–ø (–≤—ñ–¥–º—ñ–Ω—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π markdown –¥–ª—è –Ω–∏—Ö —ñ –≥–µ–Ω–µ—Ä—É—î–º–æ —ó—Ö –ø—Ä—è–º–æ)
# –¶–µ –≤–∂–µ –∑—Ä–æ–±–ª–µ–Ω–æ –≤–∏—â–µ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é st.markdown.

# –¢–µ–ø–µ—Ä –æ—Å–Ω–æ–≤–Ω–∞ —á–∞—Å—Ç–∏–Ω–∞ –∑ –ø–æ–ª—è–º–∏ –≤–≤–æ–¥—É –¥–ª—è —Ä–æ–∑–∫–ª–∞–¥—É.
# –ö–æ–∂–µ–Ω "—Ä—è–¥–æ–∫" —Ä–æ–∑–∫–ª–∞–¥—É (–æ–¥–Ω–∞ –≥—Ä—É–ø–∞ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å) –±—É–¥–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏—Å—è —è–∫ –æ–∫—Ä–µ–º–∏–π –Ω–∞–±—ñ—Ä –∫–æ–ª–æ–Ω–æ–∫.
# –ú–∏ –±—É–¥–µ–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ st.columns, —â–æ–± —ñ–º—ñ—Ç—É–≤–∞—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ñ.

st.markdown("<div style='margin-top: 20px;'></div>", unsafe_allow_html=True) # –î–æ–¥–∞—î–º–æ –Ω–µ–≤–µ–ª–∏–∫–∏–π –≤—ñ–¥—Å—Ç—É–ø

# –°—Ç–≤–æ—Ä–∏–º–æ CSS –¥–ª—è —Å—Ç–∏–ª—ñ–≤, —è–∫—ñ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω—ñ Streamlit.
# –¶–µ–π CSS –±—É–¥–µ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏—Å—è –¥–æ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤, —â–æ –≥–µ–Ω–µ—Ä—É—é—Ç—å—Å—è Streamlit.
st.markdown("""
<style>
/* –ó–∞–≥–∞–ª—å–Ω—ñ —Å—Ç–∏–ª—ñ –¥–ª—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—â–æ –º–∏ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω–∏–π grid */
.schedule-table-container {
    border: 1px solid #C0D0E0;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    background-color: #F8F8F8;
}

/* –°—Ç–∏–ª—ñ –¥–ª—è —Ä—è–¥–∫—ñ–≤ —Ç–∞ –∫–ª—ñ—Ç–∏–Ω–æ–∫ */
.schedule-row {
    display: flex; /* –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ flexbox –¥–ª—è —Ä—è–¥–∫—ñ–≤ */
    border-bottom: 1px solid #E0E0E0;
}
.schedule-row:last-child {
    border-bottom: none;
}
.schedule-cell {
    border-right: 1px solid #E0E0E0;
    padding: 4px;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    box-sizing: border-box;
    min-height: 60px; /* –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞ –∫–ª—ñ—Ç–∏–Ω–∫–∏ */
}
.schedule-cell:last-child {
    border-right: none;
}

/* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
.header-cell-flex {
    font-weight: bold;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 6px;
    color: #333333;
    background: rgba(220, 230, 240, 0.8);
    border-right: 1px solid #C0D0E0;
}
.day-header-flex {
    background: rgba(240, 200, 100, 0.9);
    font-size: 16px;
    writing-mode: vertical-rl;
    text-orientation: mixed;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    border-right: 1px solid #C0D0E0;
    min-width: 120px; /* –®–∏—Ä–∏–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è */
}
.group-header-flex {
    background: rgba(200, 220, 240, 0.8);
    font-size: 12px;
    min-width: 80px; /* –®–∏—Ä–∏–Ω–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥—Ä—É–ø–∏ */
}

/* –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Streamlit TextInput –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç—ñ */
.stTextInput > div > div > input {
    text-align: center !important;
    font-size: 9px !important;
    padding: 2px !important;
    margin: 0 !important;
    border: 1px solid #ddd !important;
    border-radius: 4px !important;
    width: 95% !important;
}
.stTextInput > label {
    display: none !important; /* Hide default Streamlit labels for compactness */
}
</style>
""", unsafe_allow_html=True)


# –†—É—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–µ—Ä—Ö–Ω—ñ—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ (–±–µ–∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è grid-template-columns)
# –¶–µ –±—É–¥–µ –ø–µ—Ä—à–∏–π "—Ä—è–¥–æ–∫" —Ç–∞–±–ª–∏—Ü—ñ
header_cols = st.columns([120, 80] + [1 for _ in PAIRS])
with header_cols[0]:
    st.markdown("<div class='header-cell-flex top-left-header' style='min-width:120px; height: 100%;'></div>", unsafe_allow_html=True)
with header_cols[1]:
    st.markdown("<div class='header-cell-flex group-header-flex' style='min-width:80px; height: 100%;'>–ì—Ä—É–ø–∞</div>", unsafe_allow_html=True)
for i, (roman, time_range) in enumerate(PAIRS):
    with header_cols[i + 2]: # +2 –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É –ø–µ—Ä—à–∏—Ö –¥–≤–æ—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤
        st.markdown(f'''
            <div class="header-cell-flex pair-header-cell" style="min-width: {st.session_state.get('col_width_pair', 100)}px; height: 100%;">
                <div><strong>{roman} –ü–ê–†–ê</strong></div>
                <div style="font-size: 13px; color: #333333; line-height: 1.2;">({time_range})</div>
            </div>
        ''', unsafe_allow_html=True)

# –û—Å–Ω–æ–≤–Ω—ñ —Ä—è–¥–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ
for i_day, day_name in enumerate(DAYS):
    # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è —Å—Ç–≤–æ—Ä—é—î–º–æ –±–ª–æ–∫, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è —Ç–∞ –≤—Å—ñ –≥—Ä—É–ø–∏
    with st.container(border=True): # –ú–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ st.container –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
        st.markdown(f"<div class='day-header-flex' style='float:left; height: {NUM_GROUPS_PER_DAY * 60}px; margin-right: -1px; margin-top: 1px;'>{day_name}</div>", unsafe_allow_html=True)
        # –ö–æ—Å—Ç–∏–ª—å –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–Ω—è
        # –û—Å–∫—ñ–ª—å–∫–∏ Streamlit –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ,
        # –Ω–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ —Ö–∏—Ç—Ä–∏—Ç–∏, —â–æ–± –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è –±—É–≤ –∑–ª—ñ–≤–∞ –≤—ñ–¥ –≥—Ä—É–ø.
        # Float:left –º–æ–∂–µ –¥–æ–ø–æ–º–æ–≥—Ç–∏, –∞–ª–µ –≤—ñ–Ω —Å–∫–ª–∞–¥–Ω–∏–π –∑ Streamlit.

        # –ö—Ä–∞—â–∏–π –ø—ñ–¥—Ö—ñ–¥: –∑–Ω–æ–≤—É –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ st.columns –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ä—è–¥–∫–∞,
        # –≤–∫–ª—é—á–∞—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è —è–∫ –ø–µ—Ä—à—É –∫–æ–ª–æ–Ω–∫—É, —â–æ —Ä–æ–∑—Ç—è–≥—É—î—Ç—å—Å—è.

        # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π st.markdown –¥–ª—è day-header-cell
        # —ñ —ñ–Ω—Ç–µ–≥—Ä—É—î–º–æ –π–æ–≥–æ –≤ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –¥–Ω—è.

        for i_group in range(NUM_GROUPS_PER_DAY):
            # –ö–æ–∂–µ–Ω —Ä—è–¥ (–¥–µ–Ω—å + –≥—Ä—É–ø–∞ + –ø–∞—Ä–∏)
            # –†–æ–∑–º—ñ—Ä–∏ –∫–æ–ª–æ–Ω–æ–∫: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è (—è–∫—â–æ –ø–µ—Ä—à–∏–π —Ä—è–¥ –≥—Ä—É–ø–∏), –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–∏, –ø–æ—Ç—ñ–º –ø–∞—Ä–∏
            # day_col_width = 120, group_col_width = 80, pair_col_width = (—à–∏—Ä–∏–Ω–∞ - 120 - 80) / 5
            
            # –î–ª—è –ø–µ—Ä—à–æ—ó –≥—Ä—É–ø–∏ –¥–Ω—è, –ø–µ—Ä—à–∞ –∫–æ–ª–æ–Ω–∫–∞ –±—É–¥–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–Ω—è
            # –î–ª—è —ñ–Ω—à–∏—Ö –≥—Ä—É–ø –¥–Ω—è, –ø–µ—Ä—à–∞ –∫–æ–ª–æ–Ω–∫–∞ –±—É–¥–µ –ø–æ—Ä–æ–∂–Ω—å–æ—é (–∑–∞–π–Ω—è—Ç–æ—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–Ω—è)
            
            if i_group == 0:
                # –ü–µ—Ä—à–∏–π —Ä—è–¥–æ–∫ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è: –≤–∫–ª—é—á–∞—î –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
                # –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ 1 (–¥–µ–Ω—å) + 1 (–≥—Ä—É–ø–∞) + 5 (–ø–∞—Ä) –∫–æ–ª–æ–Ω–æ–∫
                cols = st.columns([120, 80] + [1 for _ in PAIRS])
                with cols[0]:
                    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è (—Ä–æ–∑—Ç—è–≥—É—î—Ç—å—Å—è –Ω–∞ –≤—Å—ñ NUM_GROUPS_PER_DAY —Ä—è–¥–∫—ñ–≤)
                    st.markdown(f"""
                        <div class="schedule-cell day-header-flex" style="min-height: {NUM_GROUPS_PER_DAY * 60}px;">
                            {day_name}
                        </div>
                    """, unsafe_allow_html=True)
                with cols[1]:
                    st.markdown(f"<div class='schedule-cell group-header-flex'>{GROUP_NAMES[i_group]}</div>", unsafe_allow_html=True)
                for i_pair in range(len(PAIRS)):
                    with cols[i_pair + 2]:
                        current_item = st.session_state.schedule_display_data.get((i_day, i_group, i_pair), {
                            "teacher": "", "subject": "", "id": str(uuid.uuid4())
                        })
                        st.session_state.schedule_display_data[(i_day, i_group, i_pair)]['subject'] = st.text_input(
                            label="–ü—Ä–µ–¥–º–µ—Ç", value=current_item["subject"],
                            key=f"subject_{st.session_state.start_date.isoformat()}_{i_day}_{i_group}_{i_pair}", placeholder="–ü—Ä–µ–¥–º–µ—Ç"
                        )
                        st.session_state.schedule_display_data[(i_day, i_group, i_pair)]['teacher'] = st.text_input(
                            label="–í–∏–∫–ª–∞–¥–∞—á", value=current_item["teacher"],
                            key=f"teacher_{st.session_state.start_date.isoformat()}_{i_day}_{i_group}_{i_pair}", placeholder="–í–∏–∫–ª–∞–¥–∞—á"
                        )
            else:
                # –ù–∞—Å—Ç—É–ø–Ω—ñ —Ä—è–¥–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è: —Ç—ñ–ª—å–∫–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–∏ —Ç–∞ –ø–∞—Ä–∏
                # –ú–∏ —Å—Ç–≤–æ—Ä—é—î–º–æ 1 (–ø–æ—Ä–æ–∂–Ω—è, –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –∑–∞–≥–æ–ª–æ–≤–∫—É –¥–Ω—è) + 1 (–≥—Ä—É–ø–∞) + 5 (–ø–∞—Ä) –∫–æ–ª–æ–Ω–æ–∫
                cols = st.columns([120, 80] + [1 for _ in PAIRS])
                with cols[0]:
                    # –¶—è –∫–æ–ª–æ–Ω–∫–∞ "–ø—É—Å—Ç–∞" —ñ –≤—ñ–∑—É–∞–ª—å–Ω–æ –∑–∞–π–Ω—è—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –¥–Ω—è –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä—è–¥–∫–∞
                    st.markdown(f"<div class='schedule-cell' style='min-height: 60px; border:none;'></div>", unsafe_allow_html=True)
                with cols[1]:
                    st.markdown(f"<div class='schedule-cell group-header-flex'>{GROUP_NAMES[i_group]}</div>", unsafe_allow_html=True)
                for i_pair in range(len(PAIRS)):
                    with cols[i_pair + 2]:
                        current_item = st.session_state.schedule_display_data.get((i_day, i_group, i_pair), {
                            "teacher": "", "subject": "", "id": str(uuid.uuid4())
                        })
                        st.session_state.schedule_display_data[(i_day, i_group, i_pair)]['subject'] = st.text_input(
                            label="–ü—Ä–µ–¥–º–µ—Ç", value=current_item["subject"],
                            key=f"subject_{st.session_state.start_date.isoformat()}_{i_day}_{i_group}_{i_pair}", placeholder="–ü—Ä–µ–¥–º–µ—Ç"
                        )
                        st.session_state.schedule_display_data[(i_day, i_group, i_pair)]['teacher'] = st.text_input(
                            label="–í–∏–∫–ª–∞–¥–∞—á", value=current_item["teacher"],
                            key=f"teacher_{st.session_state.start_date.isoformat()}_{i_day}_{i_group}_{i_pair}", placeholder="–í–∏–∫–ª–∞–¥–∞—á"
                        )
    st.markdown("<div style='clear:both;'></div>", unsafe_allow_html=True) # –û—á–∏—â–∞—î–º–æ float


# --- –ö–Ω–æ–ø–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ---
with col_save_btn:
    if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", key="save_button_action"):
        save_schedule(st.session_state.start_date, st.session_state.schedule_display_data)

# –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É PDF –∑ –≤–∏–±—Ä–∞–Ω–∏–º —Ç–∏–∂–Ω–µ–º
pdf_file_name = f"—Ä–æ–∑–∫–ª–∞–¥_{st.session_state.start_date.strftime('%d.%m')}‚Äì{end_date.strftime('%d.%m')}.pdf"

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF"
with col_download_btn:
    pdf_bytes = generate_pdf(st.session_state.schedule_display_data, st.session_state.start_date, end_date, PAIRS, DAYS, GROUP_NAMES, NUM_GROUPS_PER_DAY)

    if pdf_bytes:
        st.download_button(
            label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF",
            data=pdf_bytes,
            file_name=pdf_file_name,
            mime="application/pdf",
            key="download_button"
        )
    else:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF-—Ñ–∞–π–ª.")

# PDF Generation Function (unchanged, just ensure it uses correct data)
def generate_pdf(schedule_data_for_pdf, start_date_pdf, end_date_pdf, pairs_pdf, days_pdf, group_names_pdf, num_groups_per_day_pdf):
    pdf = FPDF(orientation='L', unit='mm', format='A4')
    pdf.add_page()

    regular_font_path = "fonts/DejaVuSans.ttf"
    bold_font_path = "fonts/DejaVuSans-Bold.ttf"

    try:
        if not os.path.exists("fonts"):
            os.makedirs("fonts")
        if not os.path.exists(regular_font_path):
            st.error(f"–®—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {regular_font_path}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ 'DejaVuSans.ttf' —É –ø–∞–ø–∫—É 'fonts'.")
            return None
        if not os.path.exists(bold_font_path):
            st.error(f"–®—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {bold_font_path}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ 'DejaVuSans-Bold.ttf' —É –ø–∞–ø–∫—É 'fonts'.")
            return None

        pdf.add_font("DejaVuSans", "", regular_font_path, uni=True)
        pdf.add_font("DejaVuSans", "B", bold_font_path, uni=True)
        pdf.set_font("DejaVuSans", "", size=10)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É: {e}. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª–∏ —à—Ä–∏—Ñ—Ç—ñ–≤ —ñ—Å–Ω—É—é—Ç—å —ñ –¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return None

    pdf.set_font("DejaVuSans", "B", 14)
    pdf.cell(0, 10, txt=f"–†–æ–∑–∫–ª–∞–¥: {start_date_pdf.strftime('%d.%m.%Y')} ‚Äì {end_date_pdf.strftime('%d.%m.%Y')}", ln=True, align="C")
    pdf.ln(5)

    page_width = pdf.w - 2 * pdf.l_margin
    day_col_width = 30
    group_col_width = 30
    pair_col_width = (page_width - day_col_width - group_col_width) / len(pairs_pdf)

    header_height = 15
    content_cell_height = 15

    initial_x = pdf.l_margin
    initial_y = pdf.get_y()

    pdf.set_font("DejaVuSans", "B", 10)

    pdf.set_xy(initial_x, initial_y)
    pdf.cell(day_col_width, header_height, txt="", border=1, align="C")

    pdf.set_xy(initial_x + day_col_width, initial_y)
    pdf.cell(group_col_width, header_height, txt="–ì—Ä—É–ø–∞", border=1, align="C")

    current_x_for_pairs = initial_x + day_col_width + group_col_width
    for roman, time_range in pairs_pdf:
        pdf.set_xy(current_x_for_pairs, initial_y)
        pdf.multi_cell(pair_col_width, header_height / 2, txt=f"{roman} –ü–ê–†–ê\n({time_range})", border=1, align="C")
        current_x_for_pairs += pair_col_width

    pdf.set_xy(initial_x, initial_y + header_height)

    pdf.set_font("DejaVuSans", "", 7)

    for i_day, day_name in enumerate(days_pdf):
        required_height_for_day_block = content_cell_height * num_groups_per_day_pdf

        if pdf.get_y() + required_height_for_day_block > (pdf.h - pdf.b_margin):
            pdf.add_page()
            pdf.set_font("DejaVuSans", "B", 10)
            pdf.set_xy(initial_x, pdf.t_margin)
            pdf.cell(day_col_width, header_height, txt="", border=1, align="C")
            pdf.set_xy(initial_x + day_col_width, pdf.t_margin)
            pdf.cell(group_col_width, header_height, txt="–ì—Ä—É–ø–∞", border=1, align="C")

            current_x_for_pairs = initial_x + day_col_width + group_col_width
            for roman, time_range in pairs_pdf:
                pdf.set_xy(current_x_for_pairs, pdf.t_margin)
                pdf.multi_cell(pair_col_width, header_height / 2, txt=f"{roman} –ü–ê–†–ê\n({time_range})", border=1, align="C")
                current_x_for_pairs += pair_col_width
            pdf.set_xy(initial_x, pdf.t_margin + header_height)
            pdf.set_font("DejaVuSans", "", 7)

        day_block_start_y = pdf.get_y()

        day_text_center_x = initial_x + day_col_width / 2
        day_text_center_y = day_block_start_y + required_height_for_day_block / 2

        pdf.set_fill_color(240, 200, 100)
        pdf.rect(initial_x, day_block_start_y, day_col_width, required_height_for_day_block, 'F')
        pdf.rect(initial_x, day_block_start_y, day_col_width, required_height_for_day_block, 'D')

        pdf.set_font("DejaVuSans", "B", 12)
        pdf.set_text_color(0, 0, 0)
        pdf.rotate(90, day_text_center_x, day_text_center_y)

        text_width = pdf.get_string_width(day_name)
        pdf.set_xy(day_text_center_x - text_width / 2, day_text_center_y - pdf.font_size / 2)
        pdf.cell(text_width, pdf.font_size, txt=day_name, align="C")
        pdf.rotate(0)
        pdf.set_font("DejaVuSans", "", 7)

        for i_group in range(num_groups_per_day_pdf):
            current_row_start_x = initial_x + day_col_width
            current_row_start_y = day_block_start_y + (i_group * content_cell_height)

            pdf.set_xy(current_row_start_x, current_row_start_y)

            pdf.set_font("DejaVuSans", "", 8)
            pdf.cell(group_col_width, content_cell_height, txt=group_names_pdf[i_group], border=1, align="C")

            pdf.set_xy(current_row_start_x + group_col_width, current_row_start_y)

            pdf.set_font("DejaVuSans", "", 7)
            for i_pair in range(len(pairs_pdf)):
                item = schedule_data_for_pdf.get((i_day, i_group, i_pair), {"subject": "", "teacher": ""})
                text = f"{item['subject']}\n{item['teacher']}"

                cell_start_x = pdf.get_x()
                cell_start_y = pdf.get_y()

                pdf.multi_cell(pair_col_width, content_cell_height / 2, txt=text, border=1, align="C")

                pdf.set_xy(cell_start_x + pair_col_width, cell_start_y)

        pdf.set_xy(initial_x, day_block_start_y + required_height_for_day_block)

    return pdf.output(dest='S').encode('latin1')
