import streamlit as st
import streamlit.components.v1 as components
import uuid
from datetime import date, timedelta
from fpdf import FPDF
import os

st.set_page_config(page_title="–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä", layout="wide")

# –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –Ω–∞–∑–≤–∏ "–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä" –ø–æ —Ü–µ–Ω—Ç—Ä—É
st.markdown("<h2 style='text-align: center; margin-bottom: 10px;'>–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä</h2>", unsafe_allow_html=True)

# ----- –ë–ª–æ–∫ –û–ø—Ü—ñ–π: –í–∏–±—ñ—Ä —Ç–∏–∂–Ω—è, –ó–±–µ—Ä–µ–≥—Ç–∏, –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ -----
st.markdown("---") # –†–æ–∑–¥—ñ–ª—é–≤–∞—á –¥–ª—è –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–Ω—è –æ–ø—Ü—ñ–π

# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ st.columns –¥–ª—è —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ –æ–¥–Ω–æ–º—É —Ä—è–¥–∫—É –∑ –±—ñ–ª—å—à –∫–æ–º–ø–∞–∫—Ç–Ω–∏–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—è–º–∏
# –†–æ–∑–ø–æ–¥—ñ–ª: 18% –¥–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏, 10% –¥–ª—è –∑–±–µ—Ä–µ–≥—Ç–∏, 14% –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏, 58% –ø–æ—Ä–æ–∂–Ω—å–æ–≥–æ –ø—Ä–æ—Å—Ç–æ—Ä—É
# –û–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –¥–ª—è –æ–∫—Ä–µ–º–æ–≥–æ —Ä–æ–∑–º—ñ—â–µ–Ω–Ω—è –ª–µ–π–±–ª—É —Ç–∞ –ø–æ–ª—è –≤–∏–±–æ—Ä—É –¥–∞—Ç–∏
col_date_label, col_date_input, col_save_btn, col_download_btn, _ = st.columns([0.13, 0.15, 0.1, 0.14, 0.48]) # –ó–º—ñ–Ω–µ–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü—ñ—ó

with col_date_label:
    st.markdown("<p style='text-align: left; margin-top: 25px;'>**–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è:**</p>", unsafe_allow_html=True)

with col_date_input:
    # –í–∏–±—ñ—Ä –ø–æ—á–∞—Ç–∫—É —Ç–∏–∂–Ω—è - —Ç–µ–ø–µ—Ä –Ω–∞ —Å–∞–º–æ–º—É –≤–µ—Ä—Ö—É —è–∫ –æ–ø—Ü—ñ—è
    # –¶—è –∑–º—ñ–Ω–Ω–∞ `start_date` –±—É–¥–µ –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ—é –ø—ñ—Å–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞.
    start_date = st.date_input("", date(2025, 6, 2), key="start_date_picker", help="–í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—à–∏–π –¥–µ–Ω—å —Ç–∏–∂–Ω—è (–ø–æ–Ω–µ–¥—ñ–ª–æ–∫)") # –ü—É—Å—Ç–∏–π –ª–µ–π–±–ª, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω —Ç–µ–ø–µ—Ä –æ–∫—Ä–µ–º–æ

# –û—Å–∫—ñ–ª—å–∫–∏ start_date —Ç–µ–ø–µ—Ä –≤–∏–∑–Ω–∞—á–µ–Ω–æ –≤ Streamlit UI, end_date –º–æ–∂–µ –±—É—Ç–∏ –æ–±—á–∏—Å–ª–µ–Ω–æ –æ–¥—Ä–∞–∑—É.
# –¶–µ –≤–∏—Ä—ñ—à—É—î –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏–π NameError.
end_date = start_date + timedelta(days=4)

# –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∏–∂–Ω—è –ø–æ —Ü–µ–Ω—Ç—Ä—É, –æ–¥—Ä–∞–∑—É –ø—ñ–¥ –Ω–∞–∑–≤–æ—é "–†–æ–∑–∫–ª–∞–¥ –ø–∞—Ä"
st.markdown(f"<h3 style='text-align: center; margin-top: 0px;'>üìÜ {start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}</h3>", unsafe_allow_html=True)

# ----- –ö—ñ–Ω–µ—Ü—å –ë–ª–æ–∫—É –û–ø—Ü—ñ–π -----
st.markdown("---") # –†–æ–∑–¥—ñ–ª—é–≤–∞—á

pairs = [
    ("I", "8:30 ‚Äì 9:50"),
    ("II", "10:00 ‚Äì 11:20"),
    ("III", "11:35 ‚Äì 12:55"),
    ("IV", "13:15 ‚Äì 14:35"),
    ("V", "14:45 ‚Äì 16:05"),
]

days = ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü‚Äô—è—Ç–Ω–∏—Ü—è"]
num_groups_per_day = 6

group_names = [f"–ì—Ä—É–ø–∞ {i+1}" for i in range(num_groups_per_day)]

schedule_data = {}
for i_day in range(len(days)):
    for i_group in range(num_groups_per_day):
        for i_pair in range(len(pairs)):
            key = (i_day, i_group, i_pair)
            schedule_data[key] = {
                "teacher": f"–í—á.{chr(65 + i_day)}.{i_group+1}.{i_pair+1}",
                "group": group_names[i_group],
                "subject": f"–ü—Ä–µ–¥–º.{i_pair+1}-{i_group+1}",
                "id": str(uuid.uuid4())
            }

html_code = f"""
<style>
:root {{
    --main-bg-color: #F8F8F8;
    --header-bg-top-left: rgba(220, 230, 240, 0.8);
    --header-bg-pair: rgba(180, 210, 230, 0.8);
    --header-bg-group: rgba(200, 220, 240, 0.8);
    --header-bg-day: rgba(240, 200, 100, 0.9);
    --cell-bg: rgba(255, 255, 255, 0.7);
    --border-color: #C0D0E0;
    --draggable-bg: rgba(255, 240, 180, 0.8);
    --text-color: #333333;
    --shadow-light: 0 2px 5px rgba(0,0,0,0.1);
    --shadow-medium: 0 4px 8px rgba(0,0,0,0.15);
}}

body {{ background-color: var(--main-bg-color); }}

.timetable {{
    display: grid;
    grid-template-columns: 120px 80px repeat({len(pairs)}, 1fr);
    grid-auto-rows: minmax(55px, auto);
    gap: 1px;
    font-family: 'Roboto', sans-serif;
    border: 1px solid var(--border-color);
    border-radius: 12px;
    overflow: hidden;
    box-shadow: var(--shadow-medium);
    margin-top: 20px;
    background-color: var(--main-bg-color);
    max-width: 100%;
    overflow-x: auto;
}}

.cell {{
    border: 1px solid var(--border-color);
    background: var(--cell-bg);
    position: relative;
    padding: 4px;
    overflow: hidden;
    color: var(--text-color);
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    text-align: center;
    box-sizing: border-box;
    font-size: 10px;
}}
.cell-header {{
    font-weight: bold;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 6px;
    color: var(--text-color);
    box-shadow: var(--shadow-light);
}}
.top-left-corner {{
    background: var(--header-bg-top-left);
    border-radius: 12px 0 0 0;
}}
.pair-header {{
    background: var(--header-bg-pair);
    font-size: 16px;
    border-radius: 0;
}}
.day-header-main {{
    background: var(--header-bg-day);
    font-size: 16px;
    grid-row: span {num_groups_per_day};
    border-radius: 0;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
}}
.day-header-text {{
    transform: rotate(-90deg);
    white-space: nowrap;
    transform-origin: center center;
    font-weight: bold;
}}
.group-sub-header {{
    background: var(--header-bg-group);
    font-size: 12px;
    padding: 5px;
    border-radius: 0;
}}
.draggable {{
    background: var(--draggable-bg);
    border-radius: 6px;
    padding: 4px;
    cursor: grab;
    box-shadow: 1px 1px 3px rgba(0,0,0,0.15);
    width: 95%;
    font-size: 9px;
    line-height: 1.2;
    transition: transform 0.1s ease-in-out;
}}
.draggable:active {{
    transform: scale(1.03);
}}
.time-block {{
    font-size: 13px;
    color: var(--text-color);
    line-height: 1.2;
}}
</style>

<div class="timetable">
    <div class="cell cell-header top-left-corner"></div>
    <div class="cell cell-header top-left-corner">–ì—Ä—É–ø–∞</div>
"""

for roman, time_range in pairs:
    html_code += f'''
        <div class="cell cell-header pair-header">
            <div><strong>{roman} –ü–ê–†–ê</strong></div>
            <div class="time-block">({time_range})</div>
        </div>
    '''

for i_day, day_name in enumerate(days):
    html_code += f'<div class="cell cell-header day-header-main"><span class="day-header-text">{day_name}</span></div>'

    for i_group in range(num_groups_per_day):
        html_code += f'<div class="cell group-sub-header">{group_names[i_group]}</div>'

        for i_pair in range(len(pairs)):
            item = schedule_data[(i_day, i_group, i_pair)]
            html_code += f'''
            <div class="cell" ondrop="drop(event)" ondragover="allowDrop(event)">
                <div id="{item['id']}" class="draggable" draggable="true" ondragstart="drag(event)">
                    <strong>{item["subject"]}</strong><br>
                    {item["teacher"]}
                </div>
            </div>
            '''

html_code += """
</div>

<script>
function allowDrop(ev) {{
    ev.preventDefault();
}}
function drag(ev) {{
    ev.dataTransfer.setData("text", ev.target.id);
}}
function drop(ev) {{
    ev.preventDefault();
    var draggedId = ev.dataTransfer.getData("text");
    var draggedElem = document.getElementById(draggedId);

    var dropTarget = ev.target;
    while (!dropTarget.classList.contains("cell") || dropTarget.classList.contains("cell-header")) {{
        dropTarget = dropTarget.parentNode;
        if (!dropTarget) return;
    }}

    var existing = dropTarget.querySelector(".draggable");
    var parentOfDragged = draggedElem.parentNode;

    if (existing) {{
        dropTarget.appendChild(draggedElem);
        parentOfDragged.appendChild(existing);
    }} else {{
        dropTarget.appendChild(draggedElem);
    }}
}}
</script>
"""

components.html(html_code, height=800, scrolling=True)

def generate_pdf(schedule_data, start_date, end_date, pairs, days, group_names, num_groups_per_day):
    pdf = FPDF(orientation='L', unit='mm', format='A4')
    pdf.add_page()

    regular_font_path = "fonts/DejaVuSans.ttf"
    bold_font_path = "fonts/DejaVuSans-Bold.ttf"

    try:
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –ø–∞–ø–∫–∏ fonts —Ç–∞ —à—Ä–∏—Ñ—Ç—ñ–≤
        if not os.path.exists("fonts"):
            os.makedirs("fonts") # –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        if not os.path.exists(regular_font_path):
            st.error(f"–®—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {regular_font_path}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ 'DejaVuSans.ttf' —É –ø–∞–ø–∫—É 'fonts'.")
            return None
        if not os.path.exists(bold_font_path):
            st.error(f"–®—Ä–∏—Ñ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: {bold_font_path}. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ 'DejaVuSans-Bold.ttf' —É –ø–∞–ø–∫—É 'fonts'.")
            return None

        pdf.add_font("DejaVuSans", "", regular_font_path, uni=True)
        pdf.add_font("DejaVuSans", "B", bold_font_path, uni=True)
        pdf.set_font("DejaVuSans", "", size=10)
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —à—Ä–∏—Ñ—Ç—É: {e}. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ —Ñ–∞–π–ª–∏ —à—Ä–∏—Ñ—Ç—ñ–≤ —ñ—Å–Ω—É—é—Ç—å —ñ –¥–æ—Å—Ç—É–ø–Ω—ñ.")
        return None

    pdf.set_font("DejaVuSans", "B", 14)
    pdf.cell(0, 10, txt=f"–†–æ–∑–∫–ª–∞–¥: {start_date.strftime('%d.%m.%Y')} ‚Äì {end_date.strftime('%d.%m.%Y')}", ln=True, align="C")
    pdf.ln(5)

    page_width = pdf.w - 2 * pdf.l_margin
    day_col_width = 30
    group_col_width = 30
    pair_col_width = (page_width - day_col_width - group_col_width) / len(pairs)

    header_height = 15
    content_cell_height = 15

    initial_x = pdf.l_margin 
    initial_y = pdf.get_y()

    pdf.set_font("DejaVuSans", "B", 10)
    
    pdf.set_xy(initial_x, initial_y)
    pdf.cell(day_col_width, header_height, txt="", border=1, align="C")

    pdf.set_xy(initial_x + day_col_width, initial_y)
    pdf.cell(group_col_width, header_height, txt="–ì—Ä—É–ø–∞", border=1, align="C")

    current_x_for_pairs = initial_x + day_col_width + group_col_width
    for roman, time_range in pairs:
        pdf.set_xy(current_x_for_pairs, initial_y)
        pdf.multi_cell(pair_col_width, header_height / 2, txt=f"{roman} –ü–ê–†–ê\n({time_range})", border=1, align="C")
        current_x_for_pairs += pair_col_width
    
    pdf.set_xy(initial_x, initial_y + header_height)

    pdf.set_font("DejaVuSans", "", 7)
    
    for i_day, day_name in enumerate(days):
        required_height_for_day_block = content_cell_height * num_groups_per_day
        
        if pdf.get_y() + required_height_for_day_block > (pdf.h - pdf.b_margin):
            pdf.add_page()
            pdf.set_font("DejaVuSans", "B", 10)
            pdf.set_xy(initial_x, pdf.t_margin)
            pdf.cell(day_col_width, header_height, txt="", border=1, align="C")
            pdf.set_xy(initial_x + day_col_width, pdf.t_margin)
            pdf.cell(group_col_width, header_height, txt="–ì—Ä—É–ø–∞", border=1, align="C")
            
            current_x_for_pairs = initial_x + day_col_width + group_col_width
            for roman, time_range in pairs:
                pdf.set_xy(current_x_for_pairs, pdf.t_margin)
                pdf.multi_cell(pair_col_width, header_height / 2, txt=f"{roman} –ü–ê–†–ê\n({time_range})", border=1, align="C")
                current_x_for_pairs += pair_col_width
            pdf.set_xy(initial_x, pdf.t_margin + header_height)
            pdf.set_font("DejaVuSans", "", 7)

        day_block_start_y = pdf.get_y()

        day_text_center_x = initial_x + day_col_width / 2
        day_text_center_y = day_block_start_y + required_height_for_day_block / 2

        pdf.set_fill_color(240, 200, 100)
        pdf.rect(initial_x, day_block_start_y, day_col_width, required_height_for_day_block, 'F')
        pdf.rect(initial_x, day_block_start_y, day_col_width, required_height_for_day_block, 'D')

        pdf.set_font("DejaVuSans", "B", 12)
        pdf.set_text_color(0, 0, 0)
        pdf.rotate(90, day_text_center_x, day_text_center_y)
        
        text_width = pdf.get_string_width(day_name)
        pdf.set_xy(day_text_center_x - text_width / 2, day_text_center_y - pdf.font_size / 2)
        pdf.cell(text_width, pdf.font_size, txt=day_name, align="C")
        pdf.rotate(0)
        pdf.set_font("DejaVuSans", "", 7)

        for i_group in range(num_groups_per_day):
            current_row_start_x = initial_x + day_col_width
            current_row_start_y = day_block_start_y + (i_group * content_cell_height)
            
            pdf.set_xy(current_row_start_x, current_row_start_y)

            pdf.set_font("DejaVuSans", "", 8)
            pdf.cell(group_col_width, content_cell_height, txt=group_names[i_group], border=1, align="C")
            
            pdf.set_xy(current_row_start_x + group_col_width, current_row_start_y)

            pdf.set_font("DejaVuSans", "", 7)
            for i_pair in range(len(pairs)):
                item = schedule_data[(i_day, i_group, i_pair)]
                text = f"{item['subject']}\n{item['teacher']}"

                cell_start_x = pdf.get_x()
                cell_start_y = pdf.get_y()

                pdf.multi_cell(pair_col_width, content_cell_height / 2, txt=text, border=1, align="C")
                
                pdf.set_xy(cell_start_x + pair_col_width, cell_start_y)
            
        pdf.set_xy(initial_x, day_block_start_y + required_height_for_day_block)

    return pdf.output(dest='S').encode('latin1')

# –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É PDF –∑ –≤–∏–±—Ä–∞–Ω–∏–º —Ç–∏–∂–Ω–µ–º
pdf_file_name = f"—Ä–æ–∑–∫–ª–∞–¥_{start_date.strftime('%d.%m')}‚Äì{end_date.strftime('%d.%m')}.pdf"

# –ö–Ω–æ–ø–∫–∞ "–ó–±–µ—Ä–µ–≥—Ç–∏" (–∑–∞–≥–ª—É—à–∫–∞)
with col_save_btn:
    # –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ—Å—Ç—å "–∑–±–µ—Ä–µ–≥—Ç–∏" –ø–æ–∫–∏ –Ω–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞, —Ü–µ –ª–∏—à–µ –∑–∞–≥–ª—É—à–∫–∞ –∫–Ω–æ–ø–∫–∏
    if st.button("üíæ –ó–±–µ—Ä–µ–≥—Ç–∏", key="save_button"):
        st.info("–§—É–Ω–∫—Ü—ñ—è '–ó–±–µ—Ä–µ–≥—Ç–∏' –±—É–¥–µ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ –ø—ñ–∑–Ω—ñ—à–µ.")

# –ö–Ω–æ–ø–∫–∞ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF"
with col_download_btn:
    pdf_bytes = generate_pdf(schedule_data, start_date, end_date, pairs, days, group_names, num_groups_per_day)

    if pdf_bytes:
        st.download_button(
            label="‚¨áÔ∏è –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ PDF",
            data=pdf_bytes,
            file_name=pdf_file_name,
            mime="application/pdf",
            key="download_button"
        )
    else:
        st.warning("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ PDF-—Ñ–∞–π–ª.") # –ó–º—ñ–Ω–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫—Ä–∞—â–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
